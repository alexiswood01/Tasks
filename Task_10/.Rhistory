swirl ()
"R Programming"
library (swirl)
swirl ()
library (swirl)
swirl ()
swirl ()
library (swirl)
swirl()
# password for git via terminal   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
#install.packages ("swirl")
library (swirl)
(swirl)
(swirl)
# password for git via terminal   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
#install.packages ("swirl")
library (swirl)
dir.create(file.path("~", "swirl", "courses"), recursive = TRUE)
ir.create(file.path("~", "swirl", "data"), recursive = TRUE)
dir.create(file.path("~", "swirl", "data"), recursive = TRUE)
install_course("R Programming")
library (swirl)
swirl ()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args()
args(list.files())
args(list.files)
old.dir
old.dir <-
old.dir
old.dir
old.dir <- /Users/lexywood
old.dir <- Users/lexywood
old.dir <- getwd()
dir.create(testdir)
dir.create
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest2.R")
file.rename("mytesttwo.R")
file.rename("mytest.R" , "mytest2.R")
file.copy("mytest2.R" , "mytest3.R")
file.path("mytest2.R" , "mytest3.R")
file.path("mytest3.R")
arg(file.path)
arg(folder1)
file.path("folder 1" , "folder 2")
file.path("folder1" , "folder2")
?dir.create
dir.create(file.path("testdir2" , "testdir3"), recursive = TRUE)
setwd(old.dir)
3
0
swirl()
1:20
pi:10
15:1
:
?':'
seq(1, 20)
seq(from = 1, to = 20)
seq(0, 10, by = 0.5)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical (vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE)
identical (my_matrix, my_matrix2)
patients <- ("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5!=7
5=7
!(5=7)
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any (ints < 0)
all (ints > 0)
Sys.Date()
mean(c(2, 4, 5))
source("/var/folders/vc/nbwnxqbd2mlfstmxhppcqx5h0000gn/T//RtmpE8xfi9/boring_function.R")
submit()
boring_function('my first function!')
boring_function('My first function!')
boring_function
submit()
sumbit()
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8,8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(c("What's", "up", "girlies"))
submit()
submit()
mad_libs(place = "Beckley", adjective = "pretty", noun = "cat")
submit()
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars_data)
head(cars)
plot(cars)
?plot
plot(x = speed, y = dist)
plot(x = "speed", y = "dist")
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mt_cars)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
source("/var/folders/vc/nbwnxqbd2mlfstmxhppcqx5h0000gn/T//RtmpE8xfi9/boring_function.R")
setwd("~/Desktop/Evolution/Tasks/final")
data1 <- read.csv("~/Desktop/Evolution/Tasks/final/Espeset2021_AnEntSoc_1.csv", header=TRUE, stringsAsFactors=FALSE)
data1
head(data1)
plot(data1$WingLength, data1$TestesWeight, pch=16, xlab="wing length", ylab="testes weight")
## NEED MY CSV FILE TO ONLY READ THE WEIGHT AND LENGTH COLUMNS?????? HOW???
par(mar=c(4,4,1,1), las=1)
plot(data1$WingLength, data1$TestesWeight, pch=16, xlab="wing length", ylab="testes weight")
cor.test(data1$WingLength, data1$TestesWeight)
setwd("~/Desktop/Evolution/Tasks/Task_08")
library(phytools)
AnolisTree<-force.ultrametric(read.tree("http://jonsmitchell.com/data/anolis.tre"))
AnolisTree<-force.ultrametric(read.tree("http://jonsmitchell.com/data/anolis.tre"))
plot(tree, type="fan")
AnolisTree
setwd("~/Desktop/Evolution/Tasks/Task_09")
plot(tree, type="fan")
library(phytools)
AnolisTree<-force.ultrametric(read.tree("http://jonsmitchell.com/data/anolis.tre"))
AnolisTree
plot(tree, type="fan")
setwd("~/Desktop/Evolution/Tasks/Task_08")
library(phytools)
AnolisTree<-force.ultrametric(read.tree("http://jonsmitchell.com/data/anolis.tre"))
setwd("~/Desktop/Evolution/Tasks/Task_09")
plot(tree, type="fan")
setwd('/Users/lexywood/Desktop/Evolution/Tasks/Task_08')
library(phytools)
AnolisTree<-force.ultrametric(read.tree("http://jonsmitchell.com/data/anolis.tre"))
setwd('/Users/lexywood/Desktop/Evolution/Tasks/Task_09')
plot(tree, type="fan")
setwd('/Users/lexywood/Desktop/Evolution/Tasks/Task_08')
library(phytools)
library(phytools)
tree<-force.ultrametric(read.tree("http://jonsmitchell.com/data/anolis.tre"))
plot(tree, type="fan")
ntip(tree)
Ntip(tree)
tree$edge.length
tree
data <- read.csv("https://jonsmitchell.com/data/svl.csv", stringsAsFactors=F, row.names=1)
data
svl <- setNames(data$svl, rownames(data))
svl
Ancestors <- fastAnc(tree, svl, vars=TRUE, CI=TRUE)
Ancestors
?fastAnc
par(mar=c(0.1,0.1,0.1,0.1))
plot(tree, type="fan", lwd=2, show.tip.label=F)
tiplabels(pch=16, cex=0.25*svl[tree$tip.label])
nodelabels(pch=16, cex=0.25*Ancestors$ace)
obj <- contMap(tree, svl, plot=F)
plot(obj, type="fan", legend=0.7*max(nodeHeights(tree)), sig=2, fsize=c(0.7, 0.9))
fossilData <- data.frame(svl=log(c(25.4, 23.2, 17.7, 19.7, 24, 31)), tip1=c(
"Anolis_aliniger", "Anolis_aliniger", "Anolis_occultus", "Anolis_ricordii",
"Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"))
setwd('/Users/lexywood/Desktop/Evolution/Tasks/Task_09')
library(phytools)
tree<-force.ultrametric(read.tree("http://jonsmitchell.com/data/anolis.tre"))
plot(tree, type="fan")
Ntip(tree)
tree$edge.length
tree
#Q1 There are 82 tips, and there are branch lengths.
data <- read.csv("https://jonsmitchell.com/data/svl.csv", stringsAsFactors=F, row.names=1)
data
#Q2 "data" is the different species of lizards that correspond with their SLV.
svl <- setNames(data$svl, rownames(data))
svl
Ancestors <- fastAnc(tree, svl, vars=TRUE, CI=TRUE)
Ancestors
?fastAnc
#Q3 (CI95) is the 95-percent confidence interval.
#Q4
par(mar=c(0.1,0.1,0.1,0.1))
plot(tree, type="fan", lwd=2, show.tip.label=F)
tiplabels(pch=16, cex=0.25*svl[tree$tip.label])
nodelabels(pch=16, cex=0.25*Ancestors$ace)
obj <- contMap(tree, svl, plot=F)
plot(obj, type="fan", legend=0.7*max(nodeHeights(tree)), sig=2, fsize=c(0.7, 0.9))
fossilData <- data.frame(svl=log(c(25.4, 23.2, 17.7, 19.7, 24, 31)), tip1=c(
"Anolis_aliniger", "Anolis_aliniger", "Anolis_occultus", "Anolis_ricordii",
"Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"))
?for
?for()
?for()
for()
fossilNodes <- c()
nodeN <- c()
head(fossilData)
for(i in 1:6) {
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i]<- Node
}
i
names(fossilNodes)<- nodeN
Ancestors_withFossils <- fastAnc(tree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)
Ancestors_withFossils
install.packages("gieger")
library(gieger)
deltaFit <- fitContinuous(tree, data, model= "delta")
library("gieger")
lambdaFit <- fitContinuous(tree, data, model= "lambda")
setwd('/Users/lexywood/Desktop/Evolution/Tasks/Task_10')
library(phytools)
trees <- list()
births <- vector()
Fractions <- vector()
netdiversification <- vector()
speciationrate <- vector()
Avgbranchlength <- vector()
pbtree
for (i in 1:100) {
births [i] <- runif(1,0,1)
Fractions [i] <- runif(1,0,1)
trees[[i]] <- pbtree(n=100, b=births [i], d=Fractions [i] * births[i])
netdiversification[i] <- (births[i] - Fractions[i]*births[i])
speciationrate[i] <- births[i]
Avgbranchlength [[i]] <- mean(trees[[i]] $edge.length)
}
netdiversification[i] <- (births[i] - Fractions[i]*births[i])
totaltreetips <- log(sapply(trees, Ntip))
totaltreetips
netdiversification[i]
netdiversification <- (births[i] - Fractions[i]*births[i])
netdiversification
Q4plot <- plot(netdiversification, totaltreetips)
Q4plot
line <- lm(totaltreetips ~ netdiversification)
abline(line)
Netdiversification <- (births[i] - Fractions[i]*births[i])
line <- lm(totaltreetips ~ Netdiversification)
Netdiversification
setwd('/Users/lexywood/Desktop/Evolution/Tasks/Task_10')
library(phytools)
trees <- list()
births <- vector()
Fractions <- vector()
netdiversification <- vector()
speciationrate <- vector()
Avgbranchlength <- vector()
pbtree
for (i in 1:100) {
births [i] <- runif(1,0,1)
Fractions [i] <- runif(1,0,1)
trees[[i]] <- pbtree(n=100, b=births [i], d=Fractions [i] * births[i])
netdiversification[i] <- (births[i] - Fractions[i]*births[i])
speciationrate[i] <- births[i]
Avgbranchlength [[i]] <- mean(trees[[i]] $edge.length)
}
##Q4
netdiversification <- (births[i] - Fractions[i]*births[i])
totaltreetips <- log(sapply(trees, Ntip))
totaltreetips
netdiversification
plot(netdiversification, totaltreetips)
length(totaltreetips)
length(netdiversification)
netdiversification <- (births[i] - Fractions[i]* births[i])
length(netdiversification)
plot(speciationrate, Avgbranchlength)
cor(speciationrate, Avgbranchlength)
trees
trees[73]
rates <- vector()
traits <- list()
plot(Tree)
Tree <- trees[73]
plot(Tree)
Tree
plot (1$tips, 1$internalnodes)
for (i in 1:100) {
rates[i] <- runif(1)
traits[[i]] <- fastBM(Tree, sig2=rates[i])
}
trees
trees[29]
TreeA <- trees[29]
plot(TreeA)
class(TreeA)
plot(TreeA$TreeA)
mtraitsA <- sapply(traits, mean)
cor(mtraitsA, rates)
mtraitsA
sapply(traits, mean)
setwd('/Users/lexywood/Desktop/Evolution/Tasks/Task_10')
library(phytools)
trees <- list()
births <- vector()
Fractions <- vector()
netdiversification <- vector()
speciationrate <- vector()
Avgbranchlength <- vector()
pbtree
for (i in 1:100) {
births [i] <- runif(1,0,1)
Fractions [i] <- runif(1,0,1)
trees[[i]] <- pbtree(n=100, b=births [i], d=Fractions [i] * births[i])
netdiversification[i] <- (births[i] - Fractions[i]*births[i])
speciationrate[i] <- births[i]
Avgbranchlength [[i]] <- mean(trees[[i]] $edge.length)
}
##Q4
netdiversification <- (births[i] - Fractions[i]* births[i])
totaltreetips <- log(sapply(trees, Ntip))
length(totaltreetips)
length(netdiversification)
plot(netdiversification, totaltreetips)
Q4plot <- plot(netdiversification, totaltreetips)
line <- lm(totaltreetips ~ netdiversification)
abline(line)
######## LINES 23-26 WONT WORK!!!!!!!!!!!
## They behave in a similar matter so as net diversification increases, the log of total tips do as well
##Q5
plot(speciationrate, Avgbranchlength)
## They behave oppositely, as speciation rate increases, average branch length decreases.
##Q6
cor(speciationrate, Avgbranchlength)
## exact numerical relationship: -0.306
##Q7
trees
trees[29]
TreeA <- trees[29]
rates <- vector()
traits <- list()
plot(TreeA)
########     WONT PLOT HEREEEEE
for (i in 1:100) {
rates[i] <- runif(1)
traits[[i]] <- fastBM(Tree, sig2=rates[i])
}
#######      THIS WONT WORK EITHERRRRRRR
##Q8
mtraitsA <- sapply(traits, mean)
mtraitsA
cor(mtraitsA, rates)
############# THIS IS ALSO BROKEN!!!!!
setwd('/Users/lexywood/Desktop/Evolution/Tasks/Task_10')
library(phytools)
trees <- list()
births <- vector()
Fractions <- vector()
netdiversification <- vector()
speciationrate <- vector()
Avgbranchlength <- vector()
for (i in 1:100) {
births [i] <- runif(1,0,1)
Fractions [i] <- runif(1,0,1)
trees[[i]] <- pbtree(n=100, b=births [i], d=Fractions [i] * births[i])
netdiversification[i] <- (births[i] - Fractions[i]*births[i])
speciationrate[i] <- births[i]
Avgbranchlength [[i]] <- mean(trees[[i]] $edge.length)
}
netdiversification <- (births[i] - Fractions[i]* births[i])
totaltreetips <- log(sapply(trees, Ntip))
plot(netdiversification, totaltreetips)
length(totaltreetips)
length(netdiversification)
plot(totaltreetips, y[1:length(netdiversification)])
plot(totaltreetips, netdiversification[1:length(totaltreetips)])
line <- lm(totaltreetips ~ netdiversification)
for (i in 1:100) {
births [i] <- runif(1,0,1)
Fractions [i] <- runif(1,0,1)
trees[[i]] <- pbtree(n=100, b=births [i], d=Fractions [i] * births[i])
netdiversification[i] <- (births[i] - Fractions[i]*births[i])
speciationrate[i] <- births[i]
Avgbranchlength [[i]] <- mean(trees[[i]] $edge.length)
}
netdiversification <- (births[i] - Fractions[i]* births[i])
totaltreetips <- log(sapply(trees, Ntip))
plot(netdiversification, totaltreetips)
plot(totaltreetips, netdiversification)
for (i in 1:100) {
births [i] <- runif(1,0,1)
Fractions [i] <- runif(1,0,1)
trees[[i]] <- pbtree(n=100, b=births [i], d=Fractions [i] * births[i])
netdiversification[i] <- (births[i] - Fractions[i]*births[i])
speciationrate[i] <- births[i]
Avgbranchlength [[i]] <- mean(trees[[i]] $edge.length)
for (i in 1:100) {
births [i] <- runif(1,0,1)
Fractions [i] <- runif(1,0,1)
trees[[i]] <- pbtree(n=100, b=births [i], d=Fractions [i] * births[i])
netdiversification[i] <- (births[i] - Fractions[i]*births[i])
speciationrate[i] <- births[i]
Avgbranchlength [[i]] <- mean(trees[[i]] $edge.length)
}
netdiversification <- (births[i] - Fractions[i]* births[i])
totaltreetips <- log(sapply(trees, Ntip))
length(totaltreetips)
length(netdiversification)
length(totaltreetips)
length(netdiversification)
}
