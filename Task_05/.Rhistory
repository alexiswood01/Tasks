install.packages(coala)
install.packages("coala")
library(coala)
install.packages("phytools")
install.packages("coala")
library(coala)
library(phytools)
install.packages("rehh", dep=T)
install.packages("assertthat", dep=T)
install.packages("RcppArmadillo", dep=T)
install.packages("https://cran.r-project.org/src/contrib/Archive/scrm/scrm_1.7.3-1.tar.gz", repos=NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/coala/coala_0.6.0.tar.gz", repos=NULL, type="source")
library(coala)
library(phytools)
library(coala)
model <- coal_model(sample_size=5, loci_number=10, loci_length=500, ploidy=2) + feat_mutation(10) + feat_recombination(10) + sumstat_trees() + sumstat_nucleotide_div()
model
?stimulate
?
stimulate(model)
model
stats <- stimulate(model, nsim=1)
stats <- simulate(model, nsim=1)
Diversity <- stats$pi
Diversity
Nloci <- length(stats$trees)
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
Age1 <- max(nodeHeights(t1))
Age1
t2 <- read.tree(text=stats$trees[[2]][1])
t2
plot(t2)
axisPhylo()
par(mfrow=c(1,2))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
compare.chronograms(t1,t2)
t1_1 <- read.tree(text=stats$trees[[1]][1])
t1_2 <- read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_1,t1_2)
for (locus in 1:Nloci) {
ntrees <- length(stats$trees[[locus]])
for (n in 1:ntrees) {
if (locus==1 && n==1) {
outPhy <- read.tree(text=stats$trees[[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus]][n]))
}
}
}
par(mfrow=c(1,1))
densityTree(outPhy)
model_2 <- coal_model(sample_size=5, loci_number=10, loci_length=500, ploidy=2) + feat_mutation(10) + feat_recombination(100) + sumstat_trees() + sumstat_nucleotide_div()
model_2
stats <- simulate(model_2, nsim=1)
Diversity <- stats$pi
Diversity
Nloci <- length(stats$trees)
t3 <- read.tree(text=stats$trees[[1]][1])
plot(t3)
axisPhylo()
compare.chronograms(t1,t3)
model3 <- coal_model(10, 50) + feat_mutation(par_prior("theta", sample.int(100, 1))) + sumstat_nucleotide_div()
stats <- simulate(model3, nsim=40)
mean_pi <- sapply(stats, function(x) mean(x$pi))
theta <- sapply(stats, function(x) x$pars[["theta"]])
plot(mean_pi, theta, type="p", xlab="mean_pi", ylab="theta")
LineA <- rlm(mean_pi~theta)
LineA <- lm(mean_pi~theta)
abline(LineA)
library(learnPopGen)
?coalescent.plot
coalescent.plot(n=10, ngen=20, colors = NULL)
plot1 <- coalescent.plot(n=10, ngen=20, colors = NULL)
plot1
plot2 <- coalescent.plot(n=10, ngen=30, colors = NULL)
plot2
plot3 <- coalescent.plot(n=10, ngen=40, colors = NULL)
plot3
plot1 <- coalescent.plot(n=10, ngen=20, colors = NULL)
plot1
plot2 <- coalescent.plot(n=10, ngen=30, colors = NULL)
plot2
plot2 <- coalescent.plot(n=10, ngen=30, colors = NULL)
plot2
plot3 <- coalescent.plot(n=10, ngen=40, colors = NULL)
plot3
plot3 <- coalescent.plot(n=10, ngen=40, colors = NULL)
plot3
plot3 <- coalescent.plot(n=10, ngen=40, colors = NULL)
plot3
plot3 <- coalescent.plot(n=10, ngen=40, colors = NULL)
plot3
variance(1)
?coalescent.plot
var(0, 3, 1, 3, 0, 1, 2, 0)
var(3, 1, 3, 1, 2)
var(3, 1, 3, 1)
modelA <- coal_model(c(5, 10)20) +
feat_mutation(0.5, 1, 2) +
feat_migration(1.0, 2, 1) +
feat_growth(5, time=0) +
feat_growth(8, time=1) +
feat_selection(strength_A = 1, population =2, time = 1, locus_group="all") +
feat_selection(strength_Aa = 0.2, population =1, time = 0, locus_group="all") +
sumstat_nucleotide_div()
output <- stimulate(modelA, nsim=100)
Pis <- sapply(output, function(x) x$pi)
Pis
